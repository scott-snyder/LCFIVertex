Bottom: 9f12c640e20d3c2bb03dececc000be8c2b96cc99
Top:    4b74f5d0f5ef19c115f84c2bf3e542dca3d15d5c
Author: scott snyder <sss@karma>
Date:   2020-02-12 11:38:48 -0500

Refresh of warn

---

diff --git a/src/NeuralNetTrainer.cc b/src/NeuralNetTrainer.cc
index 25a8d8b..23b6580 100644
--- a/src/NeuralNetTrainer.cc
+++ b/src/NeuralNetTrainer.cc
@@ -396,7 +396,7 @@ bool NeuralNetTrainerProcessor::_passesCuts( lcio::LCEvent* pEvent )
 			jetMomentums.push_back( vertex_lcfi::util::Vector3( mom[0], mom[1], mom[2] ) );
 		}
 	}
-	catch( lcio::Exception exception )
+	catch( const lcio::Exception& exception )
 	{
 		//Just print a warning and proceed with the other cuts.
 		if( numWarningsNoMomentum<=2 )
diff --git a/src/RPCutProcessor.cc b/src/RPCutProcessor.cc
index 412b573..9927570 100644
--- a/src/RPCutProcessor.cc
+++ b/src/RPCutProcessor.cc
@@ -278,7 +278,7 @@ void RPCutProcessor::processEvent( LCEvent * evt ) {
 		{
 			RelCol = evt->getCollection( _MonteCarloRelationColName );
 		}
-		catch( lcio::Exception exception )
+		catch( const lcio::Exception& exception )
 		{
 			// Don't want to quit, so don't do much here. Just ignore MC PID cuts and apply the other cuts.
 			// Print a warning though.
diff --git a/vertex_lcfi/nnet/src/FortranInterface.cpp b/vertex_lcfi/nnet/src/FortranInterface.cpp
index 1fa200b..7d597eb 100644
--- a/vertex_lcfi/nnet/src/FortranInterface.cpp
+++ b/vertex_lcfi/nnet/src/FortranInterface.cpp
@@ -176,7 +176,7 @@ extern "C" {
 NEURALNETDLL int LOADNEURALNETFROMFILE(const char *filename,const int *format,const int length)
 {
 	std::string fn(filename,length);
-    const NeuralNet::SerialisationMode mode = static_cast<const NeuralNet::SerialisationMode>(*format);
+    const NeuralNet::SerialisationMode mode = static_cast<NeuralNet::SerialisationMode>(*format);
 	NeuralNet *nn = new NeuralNet(fn,mode);
 	return NNFInterfaceManager<NeuralNet>::instance()->add(nn);
 }
@@ -582,7 +582,7 @@ NEURALNETDLL double TRAINWITHBATCHBACKPROPSETNORMALISERS(const int *ibp,const in
 
 NEURALNETDLL void SETSERIALISATIONMODE(const int *nn,const int *mode)
 {
-    const NeuralNet::SerialisationMode theMode = static_cast<const NeuralNet::SerialisationMode>(*mode);
+    const NeuralNet::SerialisationMode theMode = static_cast<NeuralNet::SerialisationMode>(*mode);
     NNFInterfaceManager<NeuralNet>::instance()->item(*nn)->setSerialisationMode(theMode);
 }
 
diff --git a/vertex_lcfi/util/inc/matrix.h b/vertex_lcfi/util/inc/matrix.h
index e7552fe..041742a 100644
--- a/vertex_lcfi/util/inc/matrix.h
+++ b/vertex_lcfi/util/inc/matrix.h
@@ -35,6 +35,7 @@ namespace util
         SymMatrix2x2()
             : Base_Matrix(2)
         {}
+        SymMatrix2x2(const SymMatrix2x2&) = default;
                 // Construction and assignment from a ublas matrix expression or copy assignment
         template<typename R> SymMatrix2x2(const boost::numeric::ublas::matrix_expression<R>& r) : Base_Matrix(r) {}
         // template<typename R> void operator=(const boost::numeric::ublas::matrix_expression<R>& r)
@@ -59,6 +60,7 @@ namespace util
         Matrix2x2()
             : Base_Matrix(2,2)
         {}
+        Matrix2x2 (const Matrix2x2&) = default;
 
         // Construction and assignment from a ublas matrix expression or copy assignment
         template<typename R> Matrix2x2(const boost::numeric::ublas::matrix_expression<R>& r) : Base_Matrix(r) {}
@@ -85,6 +87,8 @@ namespace util
             : Base_Matrix(3,3)
         {}
 
+        Matrix3x3 (const Matrix3x3&) = default;
+
         // Construction and assignment from a ublas matrix expression or copy assignment
         template<typename R> Matrix3x3(const boost::numeric::ublas::matrix_expression<R>& r) : Base_Matrix(r) {}
         // template<typename R> void operator=(const boost::numeric::ublas::matrix_expression<R>& r)
@@ -175,6 +179,7 @@ namespace util
         SymMatrix5x5()
             : Base_Matrix(5)
         {}
+        SymMatrix5x5(const SymMatrix5x5&) = default;
                 // Construction and assignment from a ublas matrix expression or copy assignment
         template<typename R> SymMatrix5x5(const boost::numeric::ublas::matrix_expression<R>& r) : Base_Matrix(r) {}
         // template<typename R> SymMatrix5x5& operator=(const boost::numeric::ublas::matrix_expression<R>& r)
@@ -198,7 +203,9 @@ namespace util
         SymMatrix3x3()
             : Base_Matrix(3)
         {}
-                // Construction and assignment from a ublas matrix expression or copy assignment
+      SymMatrix3x3(const SymMatrix3x3&) = default;
+
+      // Construction and assignment from a ublas matrix expression or copy assignment
         template<typename R> SymMatrix3x3(const boost::numeric::ublas::matrix_expression<R>& r) : Base_Matrix(r) {}
         // template<typename R> void operator=(const boost::numeric::ublas::matrix_expression<R>& r)
         // {
diff --git a/vertex_lcfi/util/inc/vector3.h b/vertex_lcfi/util/inc/vector3.h
index fe9879b..3d9d46a 100644
--- a/vertex_lcfi/util/inc/vector3.h
+++ b/vertex_lcfi/util/inc/vector3.h
@@ -39,6 +39,7 @@ Simple 3 Vector class
 
         // Default constructor
         Vector3();
+        Vector3 (const Vector3&) = default;
         // Construction and assignment from a ublas vector expression or copy assignment
 	template<typename R> Vector3(const boost::numeric::ublas::vector_expression<R>& r) : Base_Vector(r) 
 	{
